stages:
  - build
  - test
  - sonar
  - deploy

build:
  image:
    name: docker/compose:1.25.4
    entrypoint: [""]

  services:
    - docker:dind

  variables:
#    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2

  stage: build
  before_script:
    - echo $CI_PROJECT_NAMESPACE
    - echo $CI_PROJECT_NAME
    - export WEB_IMAGE=jduar-nvidia-smart-crm_web:latest
    - export NGINX_IMAGE=jduar-nvidia-smart-crm_nginx:latest
  script:
    - apk add --no-cache bash
    - chmod +x ./setup_env.sh
    - bash ./setup_env.sh
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD $DOCKERHUB_REGISTRY
    - docker pull $WEB_IMAGE || true
    - docker pull $NGINX_IMAGE || true
    - docker-compose build
    - docker push $WEB_IMAGE
    - docker push $NGINX_IMAGE

#UnitTest:
#  image: python:3.6
#  stage: test
#  before_script:
#    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
#    - echo "deb http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list
#    - pip install -r requirements.txt
#    - python manage.py makemigrations
#    - python manage.py migrate
#    - python manage.py runserver 8000 &
#  when: on_success
#  script:
#    - echo "SECRET_KEY=$SECRET_KEY" > .env
#    - coverage run --include='hello/*,crossroads/*,enhancer/*' --omit='*/tests.py,enhancer/debluring.py,enhancer/setup.py,enhancer/lib/*,build/*' manage.py test && coverage report -m && coverage xml
#
#  artifacts:
#    paths:
#      - coverage.xml

pylint:
  image: python:3.6
  stage: test
  before_script:
    - pip install -r requirements.txt
    - pip install pylint pylint-exit
  script:
    - mkdir ./pylint
    - pylint --disable=W0702,W0703,C0301,R0904,E1101 --output-format=text crossroads/tests.py crossroads/views.py crossroads/validator.py enhancer/compressor.py enhancer/image_processor.py enhancer/blur_detection.py enhancer/tests.py | tee ./pylint/pylint.txt || pylint-exit $?
  artifacts:
    paths:
      - ./pylint/pylint.txt

SonarScanner:
  image: addianto/sonar-scanner-cli:latest
  stage: sonar
  script:
    - sonar-scanner
      -Dsonar.host.url=https://pmpl.cs.ui.ac.id/sonarqube
      -Dsonar.login=$SONARQUBE_TOKEN
      -Dsonar.branch.name=$CI_COMMIT_REF_NAME

DeploymentStaging:
  image:
    name: docker:latest
    entrypoint: [""]

  services:
    - docker:dind

  variables:
    DOCKER_DRIVER: overlay2

  stage: deploy
  before_script:
    - export WEB_IMAGE=jduar-nvidia-smart-crm_web:latest
    - export NGINX_IMAGE=jduar-nvidia-smart-crm_nginx:latest
  script:
    - mkdir -p ~/.ssh
    - echo "$PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - cat ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - scp  -o StrictHostKeyChecking=no -r ./.env.staging ./docker-compose.yml ec2-user@$EC2_PUBLIC_IP_ADDRESS:/home/ec2-user/smartcrm_backend
    - chmod +x ./deploy.sh
    - bash ./deploy.sh
  only:
    - staging

DeploymentProduction:
  image: ruby:2.4
  stage: deploy
  before_script:
    - gem install dpl
    - wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
    - heroku config:set DISABLE_COLLECTSTATIC=1 --app $HEROKU_APPNAME_PROD --api-key=$HEROKU_APIKEY
  script:
    - echo "SECRET_KEY=$SECRET_KEY" > .env
    - dpl --provider=heroku --app=$HEROKU_APPNAME_PROD --api-key=$HEROKU_APIKEY
    - export HEROKU_API_KEY=$HEROKU_APIKEY
    - heroku run --app $HEROKU_APPNAME_PROD migrate
  environment:
    name: production
    url: $HEROKU_APP_HOST_PROD
  only:
    - master
  when: manual